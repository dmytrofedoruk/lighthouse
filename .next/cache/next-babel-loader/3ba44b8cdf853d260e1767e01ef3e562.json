{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect, useContext, createContext } from \"react\";\nimport { httpClient } from \"./Api\";\nimport { Cookies } from \"react-cookie\";\nvar authContext = /*#__PURE__*/createContext({});\n\n// Provider component that wraps app and makes auth object ..\n// ... available to any child component that calls useAuth().\n\nexport function AuthProvider(_ref) {\n  var children = _ref.children;\n  var auth = useProvideAuth();\n  return __jsx(authContext.Provider, {\n    value: auth\n  }, children);\n}\n\n// Hook for child components to get the auth object ...\n// ... and re-render when it changes.\n\nexport var useAuth = function useAuth() {\n  return useContext(authContext);\n};\nvar useProvideAuth = function useProvideAuth() {\n  var _useState = useState(null),\n    authUser = _useState[0],\n    setAuthUser = _useState[1];\n  var _useState2 = useState(true),\n    isLoadingUser = _useState2[0],\n    setLoadingUser = _useState2[1];\n  var _useState3 = useState(false),\n    isLoading = _useState3[0],\n    setLoading = _useState3[1];\n  var _useState4 = useState(''),\n    error = _useState4[0],\n    setError = _useState4[1];\n  var fetchStart = function fetchStart() {\n    setLoading(true);\n    setError('');\n  };\n  var fetchSuccess = function fetchSuccess() {\n    setLoading(false);\n    setError('');\n  };\n  var fetchError = function fetchError(error) {\n    setLoading(false);\n    setError(error);\n  };\n  var userLogin = function userLogin(data, callbackFun) {\n    fetchStart();\n    httpClient.post('auth/login', data).then(function (_ref2) {\n      var data = _ref2.data;\n      if (data.result) {\n        fetchSuccess();\n        httpClient.defaults.headers.common['Authorization'] = 'Bearer ' + data.token.access_token;\n        var cookies = new Cookies();\n        cookies.set('token', data.token.access_token);\n        getAuthUser();\n        if (callbackFun) callbackFun();\n      } else {\n        fetchError(data.error);\n      }\n    })[\"catch\"](function (error) {\n      fetchError(error.message);\n    });\n  };\n  var userSignup = function userSignup(data, callbackFun) {\n    fetchStart();\n    httpClient.post('auth/register', data).then(function (_ref3) {\n      var data = _ref3.data;\n      if (data.result) {\n        fetchSuccess();\n        httpClient.defaults.headers.common['Authorization'] = 'Bearer ' + data.token.access_token;\n        var cookies = new Cookies();\n        cookies.set('token', data.token.access_token);\n        if (callbackFun) callbackFun();\n      } else {\n        fetchError(data.error);\n      }\n    })[\"catch\"](function (error) {\n      fetchError(error.message);\n    });\n  };\n  var userSignOut = function userSignOut(callbackFun) {\n    fetchStart();\n    httpClient.post('auth/logout').then(function (_ref4) {\n      var data = _ref4.data;\n      if (data.result) {\n        fetchSuccess();\n        setAuthUser(false);\n        httpClient.defaults.headers.common['Authorization'] = '';\n        var cookies = new Cookies();\n        cookies.remove('token');\n        if (callbackFun) callbackFun();\n      } else {\n        fetchError(data.error);\n      }\n    })[\"catch\"](function (error) {\n      fetchError(error.message);\n    });\n  };\n  var getAuthUser = function getAuthUser() {\n    fetchStart();\n    httpClient.post(\"auth/me\").then(function (_ref5) {\n      var data = _ref5.data;\n      if (data.user) {\n        fetchSuccess();\n        setAuthUser(data.user);\n      } else {\n        fetchError(data.error);\n      }\n    })[\"catch\"](function (error) {\n      httpClient.defaults.headers.common['Authorization'] = '';\n      fetchError(error.message);\n    });\n  };\n\n  // Subscribe to user on mount\n  // Because this sets state in the callback it will cause any ...\n  // ... component that utilizes this hook to re-render with the ...\n  // ... latest auth object.\n\n  useEffect(function () {\n    var cookies = new Cookies();\n    var token = cookies.get(\"token\");\n    httpClient.defaults.headers.common['Authorization'] = 'Bearer ' + token;\n    httpClient.post(\"auth/me\").then(function (_ref6) {\n      var data = _ref6.data;\n      if (data.user) {\n        setAuthUser(data.user);\n      }\n      setLoadingUser(false);\n    })[\"catch\"](function (error) {\n      cookies.remove('token');\n      httpClient.defaults.headers.common['Authorization'] = '';\n      setLoadingUser(false);\n    });\n  }, []);\n\n  // Return the user object and auth methods\n  return {\n    isLoadingUser: isLoadingUser,\n    isLoading: isLoading,\n    authUser: authUser,\n    error: error,\n    setAuthUser: setAuthUser,\n    getAuthUser: getAuthUser,\n    userLogin: userLogin,\n    userSignup: userSignup,\n    userSignOut: userSignOut\n  };\n};\nexport var isUnRestrictedRoute = function isUnRestrictedRoute(pathname) {\n  return pathname === '/signin' || pathname === '/signup' || pathname === '/forgot-password' || pathname === '/reset-password';\n};","map":null,"metadata":{},"sourceType":"module"}