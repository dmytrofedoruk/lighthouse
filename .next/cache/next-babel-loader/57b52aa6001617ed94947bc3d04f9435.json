{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useEffect, useContext, createContext } from \"react\";\nimport { httpClient } from \"./Api\";\nimport { Cookies } from \"react-cookie\";\nconst authContext = /*#__PURE__*/createContext({});\n\n// Provider component that wraps app and makes auth object ..\n// ... available to any child component that calls useAuth().\n\nexport function AuthProvider({\n  children\n}) {\n  const auth = useProvideAuth();\n  return __jsx(authContext.Provider, {\n    value: auth\n  }, children);\n}\n\n// Hook for child components to get the auth object ...\n// ... and re-render when it changes.\n\nexport const useAuth = () => {\n  return useContext(authContext);\n};\nconst useProvideAuth = () => {\n  const {\n    0: authUser,\n    1: setAuthUser\n  } = useState(null);\n  const {\n    0: isLoadingUser,\n    1: setLoadingUser\n  } = useState(true);\n  const {\n    0: isLoading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: error,\n    1: setError\n  } = useState('');\n  const fetchStart = () => {\n    setLoading(true);\n    setError('');\n  };\n  const fetchSuccess = () => {\n    setLoading(false);\n    setError('');\n  };\n  const fetchError = error => {\n    setLoading(false);\n    setError(error);\n  };\n  const userLogin = (data, callbackFun) => {\n    fetchStart();\n    httpClient.post('auth/login', data).then(({\n      data\n    }) => {\n      if (data.result) {\n        fetchSuccess();\n        httpClient.defaults.headers.common['Authorization'] = 'Bearer ' + data.token.access_token;\n        const cookies = new Cookies();\n        cookies.set('token', data.token.access_token);\n        getAuthUser();\n        if (callbackFun) callbackFun();\n      } else {\n        fetchError(data.error);\n      }\n    }).catch(function (error) {\n      fetchError(error.message);\n    });\n  };\n  const userSignup = (data, callbackFun) => {\n    fetchStart();\n    httpClient.post('auth/register', data).then(({\n      data\n    }) => {\n      if (data.result) {\n        fetchSuccess();\n        httpClient.defaults.headers.common['Authorization'] = 'Bearer ' + data.token.access_token;\n        const cookies = new Cookies();\n        cookies.set('token', data.token.access_token);\n        if (callbackFun) callbackFun();\n      } else {\n        fetchError(data.error);\n      }\n    }).catch(function (error) {\n      fetchError(error.message);\n    });\n  };\n  const userSignOut = callbackFun => {\n    fetchStart();\n    httpClient.post('auth/logout').then(({\n      data\n    }) => {\n      if (data.result) {\n        fetchSuccess();\n        setAuthUser(false);\n        httpClient.defaults.headers.common['Authorization'] = '';\n        const cookies = new Cookies();\n        cookies.remove('token');\n        if (callbackFun) callbackFun();\n      } else {\n        fetchError(data.error);\n      }\n    }).catch(function (error) {\n      fetchError(error.message);\n    });\n  };\n  const getAuthUser = () => {\n    fetchStart();\n    httpClient.post(\"auth/me\").then(({\n      data\n    }) => {\n      if (data.user) {\n        fetchSuccess();\n        setAuthUser(data.user);\n      } else {\n        fetchError(data.error);\n      }\n    }).catch(function (error) {\n      httpClient.defaults.headers.common['Authorization'] = '';\n      fetchError(error.message);\n    });\n  };\n\n  // Subscribe to user on mount\n  // Because this sets state in the callback it will cause any ...\n  // ... component that utilizes this hook to re-render with the ...\n  // ... latest auth object.\n\n  useEffect(() => {\n    const cookies = new Cookies();\n    const token = cookies.get(\"token\");\n    httpClient.defaults.headers.common['Authorization'] = 'Bearer ' + token;\n    httpClient.post(\"auth/me\").then(({\n      data\n    }) => {\n      if (data.user) {\n        setAuthUser(data.user);\n      }\n      setLoadingUser(false);\n    }).catch(function (error) {\n      cookies.remove('token');\n      httpClient.defaults.headers.common['Authorization'] = '';\n      setLoadingUser(false);\n    });\n  }, []);\n\n  // Return the user object and auth methods\n  return {\n    isLoadingUser,\n    isLoading,\n    authUser,\n    error,\n    setAuthUser,\n    getAuthUser,\n    userLogin,\n    userSignup,\n    userSignOut\n  };\n};\nexport const isUnRestrictedRoute = pathname => {\n  return pathname === '/signin' || pathname === '/signup' || pathname === '/forgot-password' || pathname === '/reset-password';\n};","map":null,"metadata":{},"sourceType":"module"}