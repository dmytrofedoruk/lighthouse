{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect } from \"react\";\nimport { Layout, message } from \"antd\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport HorizontalDefault from \"../Topbar/HorizontalDefault\";\nimport HorizontalDark from \"../Topbar/HorizontalDark\";\nimport InsideHeader from \"../Topbar/InsideHeader\";\nimport AboveHeader from \"../Topbar/AboveHeader\";\nimport BelowHeader from \"../Topbar/BelowHeader\";\nimport Topbar from \"../Topbar\";\nimport { LAYOUT_TYPE_BOXED, LAYOUT_TYPE_FRAMED, LAYOUT_TYPE_FULL, NAV_STYLE_ABOVE_HEADER, NAV_STYLE_BELOW_HEADER, NAV_STYLE_DARK_HORIZONTAL, NAV_STYLE_DEFAULT_HORIZONTAL, NAV_STYLE_DRAWER, NAV_STYLE_FIXED, NAV_STYLE_INSIDE_HEADER_HORIZONTAL, NAV_STYLE_MINI_SIDEBAR, NAV_STYLE_NO_HEADER_EXPANDED_SIDEBAR, NAV_STYLE_NO_HEADER_MINI_SIDEBAR, THEME_TYPE_DARK } from \"../../../constants/ThemeSetting\";\nimport NoHeaderNotification from \"../Topbar/NoHeaderNotification\";\nimport { isUnRestrictedRoute, useAuth } from \"../../../util/use-auth\";\nimport { useRouter } from \"next/router\";\nimport CircularProgress from \"../../components/CircularProgress\";\nimport { updateWindowWidth } from \"../../../redux/actions\";\nimport AppSidebar from \"./AppSidebar\";\nconst getContainerClass = navStyle => {\n  switch (navStyle) {\n    case NAV_STYLE_DARK_HORIZONTAL:\n      return \"gx-container-wrap\";\n    case NAV_STYLE_DEFAULT_HORIZONTAL:\n      return \"gx-container-wrap\";\n    case NAV_STYLE_INSIDE_HEADER_HORIZONTAL:\n      return \"gx-container-wrap\";\n    case NAV_STYLE_BELOW_HEADER:\n      return \"gx-container-wrap\";\n    case NAV_STYLE_ABOVE_HEADER:\n      return \"gx-container-wrap\";\n    default:\n      return '';\n  }\n};\nconst getNavStyles = navStyle => {\n  switch (navStyle) {\n    case NAV_STYLE_DEFAULT_HORIZONTAL:\n      return __jsx(HorizontalDefault, null);\n    case NAV_STYLE_DARK_HORIZONTAL:\n      return __jsx(HorizontalDark, null);\n    case NAV_STYLE_INSIDE_HEADER_HORIZONTAL:\n      return __jsx(InsideHeader, null);\n    case NAV_STYLE_ABOVE_HEADER:\n      return __jsx(AboveHeader, null);\n    case NAV_STYLE_BELOW_HEADER:\n      return __jsx(BelowHeader, null);\n    case NAV_STYLE_FIXED:\n      return __jsx(Topbar, null);\n    case NAV_STYLE_DRAWER:\n      return __jsx(Topbar, null);\n    case NAV_STYLE_MINI_SIDEBAR:\n      return __jsx(Topbar, null);\n    case NAV_STYLE_NO_HEADER_MINI_SIDEBAR:\n      return __jsx(NoHeaderNotification, null);\n    case NAV_STYLE_NO_HEADER_EXPANDED_SIDEBAR:\n      return __jsx(NoHeaderNotification, null);\n    default:\n      return null;\n  }\n};\nconst {\n  Content,\n  Footer\n} = Layout;\nconst today = new Date();\nconst AppLayout = ({\n  children\n}) => {\n  const {\n    authUser,\n    isLoadingUser,\n    error\n  } = useAuth();\n  const themeType = useSelector(({\n    settings\n  }) => settings.themeType);\n  const navStyle = useSelector(({\n    settings\n  }) => settings.navStyle);\n  const layoutType = useSelector(({\n    settings\n  }) => settings.layoutType);\n  const router = useRouter();\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (themeType === THEME_TYPE_DARK) {\n      document.body.classList.add('dark-theme');\n    } else if (document.body.classList.contains('dark-theme')) {\n      document.body.classList.remove('dark-theme');\n    }\n  }, [themeType]);\n  useEffect(() => {\n    if (layoutType === LAYOUT_TYPE_FULL) {\n      document.body.classList.remove('boxed-layout');\n      document.body.classList.remove('framed-layout');\n      document.body.classList.add('full-layout');\n    } else if (layoutType === LAYOUT_TYPE_BOXED) {\n      document.body.classList.remove('full-layout');\n      document.body.classList.remove('framed-layout');\n      document.body.classList.add('boxed-layout');\n    } else if (layoutType === LAYOUT_TYPE_FRAMED) {\n      document.body.classList.remove('boxed-layout');\n      document.body.classList.remove('full-layout');\n      document.body.classList.add('framed-layout');\n    }\n  }, [layoutType]);\n  useEffect(() => {\n    if (navStyle === NAV_STYLE_DEFAULT_HORIZONTAL || navStyle === NAV_STYLE_DARK_HORIZONTAL || navStyle === NAV_STYLE_INSIDE_HEADER_HORIZONTAL || navStyle === NAV_STYLE_ABOVE_HEADER || navStyle === NAV_STYLE_BELOW_HEADER) {\n      document.body.classList.add('full-scroll');\n      document.body.classList.add('horizontal-layout');\n    } else {\n      document.body.classList.remove('full-scroll');\n      document.body.classList.remove('horizontal-layout');\n    }\n  }, [navStyle]);\n  useEffect(() => {\n    window.addEventListener('resize', () => {\n      dispatch(updateWindowWidth(window.innerWidth));\n    });\n  }, [dispatch]);\n  useEffect(() => {\n    if (error) {\n      message.error(error.toString()).then(r => r);\n    }\n  }, [error]);\n  useEffect(() => {\n    if (!isLoadingUser) {\n      if (!authUser && !isUnRestrictedRoute(router.pathname)) {\n        router.push('/signin').then(r => r);\n      } else if (authUser && isUnRestrictedRoute(router.pathname)) {\n        router.push('/').then(r => r);\n      }\n    }\n  }, [authUser, isLoadingUser, router.pathname]);\n  if (isLoadingUser) {\n    return __jsx(\"div\", {\n      className: \"gx-loader-view\"\n    }, __jsx(CircularProgress, null));\n  }\n  return isUnRestrictedRoute(router.pathname) ? children : __jsx(Layout, {\n    className: `gx-app-layout`\n  }, __jsx(AppSidebar, {\n    navStyle: navStyle\n  }), __jsx(Layout, null, getNavStyles(navStyle), __jsx(Content, {\n    className: `gx-layout-content ${getContainerClass(navStyle)}`\n  }, __jsx(\"div\", {\n    className: \"gx-main-content-wrapper\"\n  }, children), __jsx(Footer, null, __jsx(\"div\", {\n    className: \"gx-layout-footer-content\"\n  }, \"Copyright Company Name \\xA9 \", today.getFullYear())))));\n};\nexport default AppLayout;","map":null,"metadata":{},"sourceType":"module"}