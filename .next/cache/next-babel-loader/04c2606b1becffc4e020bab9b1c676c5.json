{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect } from \"react\";\nimport { Menu, Button } from \"antd\";\nimport Link from \"next/link\";\nimport { useRouter } from 'next/router';\nimport CustomScrollbars from \"../../../util/CustomScrollbars\";\nimport SidebarLogo from \"./SidebarLogo\";\nimport UserProfile from \"./UserProfile\";\nimport AppsNavigation from \"./AppsNavigation\";\nimport { NAV_STYLE_NO_HEADER_EXPANDED_SIDEBAR, NAV_STYLE_NO_HEADER_MINI_SIDEBAR, THEME_TYPE_LITE } from \"../../../constants/ThemeSetting\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { setPathName } from \"../../../redux/actions\";\nconst SubMenu = Menu.SubMenu;\nconst MenuItemGroup = Menu.ItemGroup;\nconst SidebarContent = () => {\n  const navStyle = useSelector(({\n    settings\n  }) => settings.navStyle);\n  const themeType = useSelector(({\n    settings\n  }) => settings.themeType);\n  const dispatch = useDispatch();\n  const router = useRouter();\n  const getNoHeaderClass = navStyle => {\n    if (navStyle === NAV_STYLE_NO_HEADER_MINI_SIDEBAR || navStyle === NAV_STYLE_NO_HEADER_EXPANDED_SIDEBAR) {\n      return \"gx-no-header-notifications\";\n    }\n    return \"\";\n  };\n  const getNavStyleSubMenuClass = navStyle => {\n    if (navStyle === NAV_STYLE_NO_HEADER_MINI_SIDEBAR) {\n      return \"gx-no-header-submenu-popup\";\n    }\n    return \"\";\n  };\n  useEffect(() => {\n    dispatch(setPathName(router.pathname));\n  }, [router.pathname]);\n  const selectedKeys = router.pathname.substr(1) || 'sample';\n  const defaultOpenKeys = selectedKeys.split('/')[1];\n  return __jsx(React.Fragment, null, __jsx(SidebarLogo, null), __jsx(\"div\", {\n    className: \"gx-sidebar-content\"\n  }, __jsx(CustomScrollbars, {\n    className: \"gx-layout-sider-scrollbar\"\n  }, __jsx(Menu, {\n    defaultOpenKeys: [defaultOpenKeys],\n    selectedKeys: [selectedKeys],\n    theme: themeType === THEME_TYPE_LITE ? 'lite' : 'dark',\n    mode: \"inline\"\n  }, __jsx(Menu.Item, {\n    key: \"sample\"\n  }, __jsx(Link, {\n    href: \"/sample\"\n  }, __jsx(\"a\", null, __jsx(\"i\", {\n    className: \"icon icon-dasbhoard\"\n  }), __jsx(\"span\", null, \"Sample\")))))), __jsx(\"div\", {\n    className: `gx-sidebar-notifications ${getNoHeaderClass(navStyle)}`\n  }, __jsx(UserProfile, null))));\n};\nSidebarContent.propTypes = {};\nexport default SidebarContent;","map":{"version":3,"names":["React","useEffect","Menu","Button","Link","useRouter","CustomScrollbars","SidebarLogo","UserProfile","AppsNavigation","NAV_STYLE_NO_HEADER_EXPANDED_SIDEBAR","NAV_STYLE_NO_HEADER_MINI_SIDEBAR","THEME_TYPE_LITE","useDispatch","useSelector","setPathName","SubMenu","MenuItemGroup","ItemGroup","SidebarContent","navStyle","settings","themeType","dispatch","router","getNoHeaderClass","getNavStyleSubMenuClass","pathname","selectedKeys","substr","defaultOpenKeys","split","propTypes"],"sources":["E:/work/aglius/lighthouse/app/core/Sidebar/SidebarContent.js"],"sourcesContent":["import React, {useEffect} from \"react\";\nimport {Menu, Button} from \"antd\";\nimport Link from \"next/link\";\n\nimport {useRouter} from 'next/router'\nimport CustomScrollbars from \"../../../util/CustomScrollbars\";\nimport SidebarLogo from \"./SidebarLogo\";\nimport UserProfile from \"./UserProfile\";\nimport AppsNavigation from \"./AppsNavigation\";\nimport {\n  NAV_STYLE_NO_HEADER_EXPANDED_SIDEBAR,\n  NAV_STYLE_NO_HEADER_MINI_SIDEBAR,\n  THEME_TYPE_LITE\n} from \"../../../constants/ThemeSetting\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {setPathName} from \"../../../redux/actions\";\n\nconst SubMenu = Menu.SubMenu;\nconst MenuItemGroup = Menu.ItemGroup;\n\nconst SidebarContent = () => {\n  const navStyle = useSelector(({settings}) => settings.navStyle);\n  const themeType = useSelector(({settings}) => settings.themeType);\n\n  const dispatch = useDispatch();\n  const router = useRouter()\n\n  const getNoHeaderClass = (navStyle) => {\n    if (navStyle === NAV_STYLE_NO_HEADER_MINI_SIDEBAR || navStyle === NAV_STYLE_NO_HEADER_EXPANDED_SIDEBAR) {\n      return \"gx-no-header-notifications\";\n    }\n    return \"\";\n  };\n\n  const getNavStyleSubMenuClass = (navStyle) => {\n    if (navStyle === NAV_STYLE_NO_HEADER_MINI_SIDEBAR) {\n      return \"gx-no-header-submenu-popup\";\n    }\n    return \"\";\n  };\n\n  useEffect(() => {\n    dispatch(setPathName(router.pathname))\n  }, [router.pathname]);\n\n  const selectedKeys = router.pathname.substr(1) || 'sample';\n  const defaultOpenKeys = selectedKeys.split('/')[1];\n\n  return (\n    <React.Fragment>\n      <SidebarLogo/>\n      <div className=\"gx-sidebar-content\">\n        {/* <div style={{margin: \"0px 20px 12px 20px\"}}>\n          <Button className=\"gx-mb-0 design-button\" style={{background: \"#D3F36B\"}} htmlType=\"button\">\n            + Lorem ipsum\n          </Button>\n        </div> */}\n       \n        <CustomScrollbars className=\"gx-layout-sider-scrollbar\">\n          <Menu\n            defaultOpenKeys={[defaultOpenKeys]}\n            selectedKeys={[selectedKeys]}\n            theme={themeType === THEME_TYPE_LITE ? 'lite' : 'dark'}\n            mode=\"inline\">\n\n            <Menu.Item key=\"sample\">\n              <Link href=\"/sample\">\n                <a><i className=\"icon icon-dasbhoard\"/><span>Sample</span></a>\n              </Link>\n            </Menu.Item>\n            \n          </Menu>\n        </CustomScrollbars>\n        <div className={`gx-sidebar-notifications ${getNoHeaderClass(navStyle)}`}>\n          <UserProfile/>\n          {/* <AppsNavigation/> */}\n        </div>\n      </div>\n    </React.Fragment>\n  );\n};\n\nSidebarContent.propTypes = {};\nexport default SidebarContent;\n\n"],"mappings":";AAAA,OAAOA,KAAK,IAAGC,SAAS,QAAO,OAAO;AACtC,SAAQC,IAAI,EAAEC,MAAM,QAAO,MAAM;AACjC,OAAOC,IAAI,MAAM,WAAW;AAE5B,SAAQC,SAAS,QAAO,aAAa;AACrC,OAAOC,gBAAgB,MAAM,gCAAgC;AAC7D,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAOC,cAAc,MAAM,kBAAkB;AAC7C,SACEC,oCAAoC,EACpCC,gCAAgC,EAChCC,eAAe,QACV,iCAAiC;AACxC,SAAQC,WAAW,EAAEC,WAAW,QAAO,aAAa;AACpD,SAAQC,WAAW,QAAO,wBAAwB;AAElD,MAAMC,OAAO,GAAGd,IAAI,CAACc,OAAO;AAC5B,MAAMC,aAAa,GAAGf,IAAI,CAACgB,SAAS;AAEpC,MAAMC,cAAc,GAAG,MAAM;EAC3B,MAAMC,QAAQ,GAAGN,WAAW,CAAC,CAAC;IAACO;EAAQ,CAAC,KAAKA,QAAQ,CAACD,QAAQ,CAAC;EAC/D,MAAME,SAAS,GAAGR,WAAW,CAAC,CAAC;IAACO;EAAQ,CAAC,KAAKA,QAAQ,CAACC,SAAS,CAAC;EAEjE,MAAMC,QAAQ,GAAGV,WAAW,EAAE;EAC9B,MAAMW,MAAM,GAAGnB,SAAS,EAAE;EAE1B,MAAMoB,gBAAgB,GAAIL,QAAQ,IAAK;IACrC,IAAIA,QAAQ,KAAKT,gCAAgC,IAAIS,QAAQ,KAAKV,oCAAoC,EAAE;MACtG,OAAO,4BAA4B;IACrC;IACA,OAAO,EAAE;EACX,CAAC;EAED,MAAMgB,uBAAuB,GAAIN,QAAQ,IAAK;IAC5C,IAAIA,QAAQ,KAAKT,gCAAgC,EAAE;MACjD,OAAO,4BAA4B;IACrC;IACA,OAAO,EAAE;EACX,CAAC;EAEDV,SAAS,CAAC,MAAM;IACdsB,QAAQ,CAACR,WAAW,CAACS,MAAM,CAACG,QAAQ,CAAC,CAAC;EACxC,CAAC,EAAE,CAACH,MAAM,CAACG,QAAQ,CAAC,CAAC;EAErB,MAAMC,YAAY,GAAGJ,MAAM,CAACG,QAAQ,CAACE,MAAM,CAAC,CAAC,CAAC,IAAI,QAAQ;EAC1D,MAAMC,eAAe,GAAGF,YAAY,CAACG,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EAElD,OACE,MAAC,KAAK,CAAC,QAAQ,QACb,MAAC,WAAW,OAAE,EACd;IAAK,SAAS,EAAC;EAAoB,GAOjC,MAAC,gBAAgB;IAAC,SAAS,EAAC;EAA2B,GACrD,MAAC,IAAI;IACH,eAAe,EAAE,CAACD,eAAe,CAAE;IACnC,YAAY,EAAE,CAACF,YAAY,CAAE;IAC7B,KAAK,EAAEN,SAAS,KAAKV,eAAe,GAAG,MAAM,GAAG,MAAO;IACvD,IAAI,EAAC;EAAQ,GAEb,MAAC,IAAI,CAAC,IAAI;IAAC,GAAG,EAAC;EAAQ,GACrB,MAAC,IAAI;IAAC,IAAI,EAAC;EAAS,GAClB,iBAAG;IAAG,SAAS,EAAC;EAAqB,EAAE,sBAAM,QAAM,CAAO,CAAI,CACzD,CACG,CAEP,CACU,EACnB;IAAK,SAAS,EAAG,4BAA2Ba,gBAAgB,CAACL,QAAQ,CAAE;EAAE,GACvE,MAAC,WAAW,OAAE,CAEV,CACF,CACS;AAErB,CAAC;AAEDD,cAAc,CAACa,SAAS,GAAG,CAAC,CAAC;AAC7B,eAAeb,cAAc"},"metadata":{},"sourceType":"module"}