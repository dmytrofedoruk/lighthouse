{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nimport { SWITCH_LANGUAGE, TOGGLE_COLLAPSED_NAV, WINDOW_WIDTH } from \"../../constants/ActionTypes\";\nimport { LAYOUT_TYPE, LAYOUT_TYPE_FULL, NAV_STYLE, NAV_STYLE_FIXED, SET_PATH_NAME, THEME_TYPE, THEME_TYPE_SEMI_DARK, UPDATE_RTL_STATUS } from \"../../constants/ThemeSetting\";\nconst initialSettings = {\n  navCollapsed: true,\n  navStyle: NAV_STYLE_FIXED,\n  layoutType: LAYOUT_TYPE_FULL,\n  themeType: THEME_TYPE_SEMI_DARK,\n  pathname: '',\n  width: 1367,\n  isDirectionRTL: false,\n  locale: {\n    languageId: 'english',\n    locale: 'en',\n    name: 'English',\n    icon: 'us'\n  }\n};\nconst SettingsReducer = (state = initialSettings, action) => {\n  switch (action.type) {\n    case TOGGLE_COLLAPSED_NAV:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        navCollapsed: action.navCollapsed\n      });\n    case SET_PATH_NAME:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        pathname: action.pathname\n      });\n    case UPDATE_RTL_STATUS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        isDirectionRTL: action.rtlStatus\n      });\n    case WINDOW_WIDTH:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        width: action.width\n      });\n    case THEME_TYPE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        themeType: action.themeType\n      });\n    case NAV_STYLE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        navStyle: action.navStyle\n      });\n    case LAYOUT_TYPE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        layoutType: action.layoutType\n      });\n    case SWITCH_LANGUAGE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        locale: action.payload\n      });\n    default:\n      return state;\n  }\n};\nexport default SettingsReducer;","map":null,"metadata":{},"sourceType":"module"}